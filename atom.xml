<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>like a bird</title>
  
  <subtitle>call me by your name</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-01T13:56:55.691Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>��</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大二啊。。。</title>
    <link href="http://yoursite.com/2019/07/01/%E5%A4%A7%E4%BA%8C%E5%95%8A%E3%80%82%E3%80%82%E3%80%82/"/>
    <id>http://yoursite.com/2019/07/01/大二啊。。。/</id>
    <published>2019-07-01T13:48:01.000Z</published>
    <updated>2019-07-01T13:56:55.691Z</updated>
    
    <content type="html"><![CDATA[<p><strong>&ensp;&ensp;&ensp;&ensp;计组成绩也出了,心好累啊，这个暑假之后，就是大三了，不能再儿戏下去了啊，想想暑假的规划吧！</strong></p><h2 id="1-国创项目"><a href="#1-国创项目" class="headerlink" title="1.国创项目"></a>1.国创项目</h2><p>&ensp;&ensp;&ensp;&ensp;等几天出一个原型图，暑假得抓紧时间学一下后端的知识。</p><h2 id="2-智能医学"><a href="#2-智能医学" class="headerlink" title="2.智能医学"></a>2.智能医学</h2><p>&ensp;&ensp;&ensp;&ensp;明天搜点资料，现在其实还是有一点迷茫，我到底以后要干什么呢？盲目的找一个组织，是不是值得。。。</p><h2 id="3-刷题吧"><a href="#3-刷题吧" class="headerlink" title="3.刷题吧"></a>3.刷题吧</h2><p>&ensp;&ensp;&ensp;&ensp;下学期争取ccf考好点儿，抓住最后的机会吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;计组成绩也出了,心好累啊，这个暑假之后，就是大三了，不能再儿戏下去了啊，想想暑假的规划吧！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-国创项目&quot;&gt;&lt;a href=&quot;#1-国创项目&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="一点感慨" scheme="http://yoursite.com/tags/%E4%B8%80%E7%82%B9%E6%84%9F%E6%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>懵逼的if语句</title>
    <link href="http://yoursite.com/2018/10/03/%E6%87%B5%E9%80%BC%E7%9A%84if%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2018/10/03/懵逼的if语句/</id>
    <published>2018-10-03T14:58:52.000Z</published>
    <updated>2018-10-03T15:06:29.611Z</updated>
    
    <content type="html"><![CDATA[<p>本来今天说好去爬华山的，，，结果没买到票（哭）,结果只能在宿舍写苦逼的代码了。。。ε=(´ο｀*)))唉<br>上问题<strong> 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 </strong><br>一开始想着先把目标值和每一行最大的比较，然后确定从哪一行开始查找算法应该还可以优化，，结果在空数组这里卡住了，，，哎，，交换了下一开始的if语句就解决了哈哈O(∩_∩)O哈哈~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public boolean Find(int target, int [][] array) &#123;</span><br><span class="line"> </span><br><span class="line">        if((array==null||array.length==0)||(array.length==1&amp;&amp;array[0].length==0))//数组为空</span><br><span class="line">            return false;</span><br><span class="line">        if(target&lt;array[0][0]||target&gt;array[array.length-1][array[0].length-1])//超过范围</span><br><span class="line">            return false;</span><br><span class="line">        int i,j,start;</span><br><span class="line">        for(start=0;start&lt;array.length;start++)&#123;</span><br><span class="line">            if(target&lt;=array[start][array[start].length-1])&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(i=start;i&lt;array.length;i++) &#123;</span><br><span class="line">            for (j = 0; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                if (target == array[i][j])&#123;</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>爬完山回来再在优化算法好啦、、、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本来今天说好去爬华山的，，，结果没买到票（哭）,结果只能在宿舍写苦逼的代码了。。。ε=(´ο｀*)))唉&lt;br&gt;上问题&lt;strong&gt; 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>我的安卓进阶之路（数据存储）</title>
    <link href="http://yoursite.com/2018/09/10/%E6%88%91%E7%9A%84%E5%AE%89%E5%8D%93%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF%EF%BC%88%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/10/我的安卓进阶之路（数据存储）/</id>
    <published>2018-09-10T08:10:52.000Z</published>
    <updated>2018-09-10T14:18:45.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、SQLite数据库存储"><a href="#1、SQLite数据库存储" class="headerlink" title="1、SQLite数据库存储"></a>1、SQLite数据库存储</h1><h2 id="1、数据库的创建与升级"><a href="#1、数据库的创建与升级" class="headerlink" title="1、数据库的创建与升级"></a>1、数据库的创建与升级</h2><p> &nbsp;&nbsp;&nbsp;&nbsp;安卓专门提供了一个SQLiteOpenHelper帮助类，（抽象类）,必须重写onCreate()和onUpgrade()两个抽象方法。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;SQLiteOpenHelper有两个构造方法，一般重写四个参数的（Context、数据库名、Cursor、版本号）。数据库文件一般存放在/data/data/<package name="">/databases</package></p><p>&nbsp;&nbsp;&nbsp;&nbsp;两个创建数据库的方法,getReadableDatabase()、getWritableDatabase().</p><p>&nbsp;&nbsp;&nbsp;&nbsp;可以吧建表语句定义成一个字符串常量，然后再onCreate()方法中调用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static final String CREATE_BOOK=&quot;create table Book(&quot;</span><br><span class="line">            +&quot;id integer primary key autoincrement,&quot;</span><br><span class="line">            +&quot;author text,&quot;</span><br><span class="line">            +&quot;price real,&quot;</span><br><span class="line">            +&quot;pages integer,&quot;</span><br><span class="line">            +&quot;name text,&quot;</span><br><span class="line">            +&quot;category_id integer)&quot;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void onCreate(SQLiteDatabase db) &#123;</span><br><span class="line">        db.execSQL(CREATE_BOOK);</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;sqlite3加上数据库名打开数据库</p><p>&nbsp;&nbsp;&nbsp;&nbsp;升级采用switch语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</span><br><span class="line">        switch (oldVersion)&#123;</span><br><span class="line">            case 1:</span><br><span class="line">                db.execSQL(CRATE_CATEGORY);</span><br><span class="line">            case 2:</span><br><span class="line">                db.execSQL(&quot;alter table Book add column category_id integer&quot;);</span><br><span class="line">            default:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>保证跨版本升级时每一次的数据库修改都得到执行。</p><h2 id="2、数据CRUD"><a href="#2、数据CRUD" class="headerlink" title="2、数据CRUD"></a>2、数据CRUD</h2><h3 id="1、添加"><a href="#1、添加" class="headerlink" title="1、添加"></a>1、添加</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;SQLiteDatabase提供的insert()方法，三个参数：表名、null、ContentValues对象；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ContentValues values=new ContentValues();//用于添加数据</span><br><span class="line">                //第一组</span><br><span class="line">                values.put(&quot;name&quot;,&quot;The Da Vincy Code&quot;);</span><br><span class="line">                values.put(&quot;author&quot;,&quot;Dan Brown&quot;);</span><br><span class="line">                values.put(&quot;price&quot;,&quot;16.96&quot;);</span><br><span class="line">                values.put(&quot;pages&quot;,453);</span><br><span class="line">                db.insert(&quot;Book&quot;,null,values);</span><br></pre></td></tr></table></figure></p><h3 id="2、更新"><a href="#2、更新" class="headerlink" title="2、更新"></a>2、更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ContentValues values=new ContentValues();</span><br><span class="line">                values.put(&quot;price&quot;,10.99);</span><br><span class="line">                db.update(&quot;Book&quot;,values,&quot;name=?&quot;,new String[]&#123;&quot;The DaVinci Code&quot;&#125;)</span><br></pre></td></tr></table></figure><p>第三个参数对应SQL语句的where部分，表示去更新所有name等于多少的行，？是一个占位符，上述代码表示将名为“The Da Vinci Code”这本书的价格改为10.99.</p><h3 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h3><p>delete方法，三个参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.delete(&quot;Book&quot;,&quot;pages&gt;?&quot;,new String[]&#123;&quot;500&quot;&#125;);//删除页数超过500页的书籍</span><br></pre></td></tr></table></figure></p><h3 id="4、查询"><a href="#4、查询" class="headerlink" title="4、查询"></a>4、查询</h3><p>query方法，7个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Cursor cursor=db.query(&quot;Book&quot;,null,null,null,null,null,null);</span><br><span class="line">                if (cursor.moveToFirst())&#123;</span><br><span class="line">                    do&#123;</span><br><span class="line">                        String name=cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</span><br><span class="line">                        String author=cursor.getString(cursor.getColumnIndex(&quot;author&quot;));</span><br><span class="line">                        int pages=cursor.getInt(cursor.getColumnIndex(&quot;pages&quot;));</span><br><span class="line">                        double price=cursor.getDouble(cursor.getColumnIndex(&quot;price&quot;));</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book name is &quot;+name);</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book author is &quot;+author);</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book pages is &quot;+pages);</span><br><span class="line">                        Log.d(&quot;MainActivity&quot;,&quot;book price is &quot;+price);</span><br><span class="line">                    &#125;while (cursor.moveToNext());</span><br><span class="line">                &#125;</span><br><span class="line">                cursor.close();</span><br></pre></td></tr></table></figure></p><p>这里首先对整张表查询，得到一个Cursor对象，接着调用cursor的moveToFirst()方法，移动到第一行，遍历，使用getColumnIndex()方法获取某一列对应索引。</p><h3 id="5、使用事务"><a href="#5、使用事务" class="headerlink" title="5、使用事务"></a>5、使用事务</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;安卓中事务的标准用法，首先调用SQLiteDatabase的beginTransaction()方法来开启一个事务，然后在一个异常捕获的代码块中去执行具体的数据库操作操作。当所有的操作都完成之后，调用setTransactionSuccessful()表示事务已经执行成功了，最后在finally代码块中调用endTransaction()结束事务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SQLiteDatabase db=dbHelper.getWritableDatabase();</span><br><span class="line">               db.beginTransaction();//开启事务</span><br><span class="line">               try&#123;</span><br><span class="line">                   db.delete(&quot;Book&quot;,null,null);</span><br><span class="line">                   ContentValues values=new ContentValues();</span><br><span class="line">                   values.put(&quot;name&quot;,&quot;Game of Thrones&quot;);</span><br><span class="line">                   values.put(&quot;author&quot;,&quot;Geroge Martin&quot;);</span><br><span class="line">                   values.put(&quot;pages&quot;,770);</span><br><span class="line">                   values.put(&quot;price&quot;,20.88);</span><br><span class="line">                   db.insert(&quot;Book&quot;,null,values);</span><br><span class="line">                   db.setTransactionSuccessful();</span><br><span class="line">               &#125;catch (Exception e)&#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;finally &#123;</span><br><span class="line">                   db.endTransaction();//结束事务</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></p><h1 id="2、文件存储"><a href="#2、文件存储" class="headerlink" title="2、文件存储"></a>2、文件存储</h1><h2 id="1、存储"><a href="#1、存储" class="headerlink" title="1、存储"></a>1、存储</h2><p>Context类提供的openFileOutput()方法，两个参数：文件名和操作模式（MODE_PRIVATE、MODE_APPEND）。MODE_PRIVATE是默认的操作模式，表示当指定同样的文件名时，所写入的内容会覆盖原文件的内容，MODE_APPEND表示如果文件已存在，就在里面追加内容，不存在就创建新内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void save()&#123;</span><br><span class="line">   String data=&quot;Data to save&quot;;</span><br><span class="line">   FileOutputStream out = null;</span><br><span class="line">   BufferedWriter writer = null;</span><br><span class="line">   try&#123;</span><br><span class="line">       out = openFileOutput(&quot;data&quot;,Context.MODE_PRIVATE);</span><br><span class="line">       writer = new BufferedWriter(new OutputStreamWriter(out));</span><br><span class="line">       writer.writer(data);</span><br><span class="line">   &#125;catch(IOException e)&#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125;finally&#123;</span><br><span class="line">       try&#123;</span><br><span class="line">           if(writer!=null)&#123;</span><br><span class="line">              writer.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;catch(IOException e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先通过openFileOutput()方法获取一个FileOutputStreamr对象，接着再使用它获取一个OutputStreamWriter构建出一个BufferWriter对象，</p><h2 id="2、读取"><a href="#2、读取" class="headerlink" title="2、读取"></a>2、读取</h2><p>首先通过openFileInput()方法获取一个FileInputStream对象再用它构建一个InputStreamReader对象，接着再使用InputStreamReader构建出一个BufferReader对象，然后通过他来一行一行读取。并存放在一个StringBuilder对象中。</p><h1 id="3、SharedPreferences存储"><a href="#3、SharedPreferences存储" class="headerlink" title="3、SharedPreferences存储"></a>3、SharedPreferences存储</h1><p>使用键值对存储</p><h2 id="1-获取SharedPreferences对象"><a href="#1-获取SharedPreferences对象" class="headerlink" title="1.获取SharedPreferences对象"></a>1.获取SharedPreferences对象</h2><p>1、Context类的getSharedPreferences()方法，两个参数，文件名称和操作方法（MODE_PRIVATE）.<br>2、 Activity类的getPreferences()方法，只接收一个操作模式参数。自动将当前活动的类名作为SharedPreferences的文件名。<br>3、PreferenceManager类getDefaultSharedPreferences()方法。 静态方法。它接收一个Context参数，并自动使用当前的包名作为前缀来命名SharedPreferences文件。</p><h2 id="2-存储数据"><a href="#2-存储数据" class="headerlink" title="2.存储数据"></a>2.存储数据</h2><p>   1、调用SharedPreferences对象的edit()方法来获取一个sharedPreferences.Editor对象。<br>   2、向SharedPreferences.Editor对象中添加数据，比如添加一个字符串就用putString()方法，以此类推。<br>   3、调用apply（）方法将数据提交。或commit方法.</p><h2 id="3、读取数据"><a href="#3、读取数据" class="headerlink" title="3、读取数据"></a>3、读取数据</h2><p>   使用一些列get方法，均接收两个参数，一个键和默认值（传入的键找不到对应的值时，以该默认值返回）。<br>//CheckBox 用户通过点击的方式来选中和取消。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、SQLite数据库存储&quot;&gt;&lt;a href=&quot;#1、SQLite数据库存储&quot; class=&quot;headerlink&quot; title=&quot;1、SQLite数据库存储&quot;&gt;&lt;/a&gt;1、SQLite数据库存储&lt;/h1&gt;&lt;h2 id=&quot;1、数据库的创建与升级&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="安卓" scheme="http://yoursite.com/categories/%E5%AE%89%E5%8D%93/"/>
    
    
  </entry>
  
  <entry>
    <title>队列解决约瑟夫问题</title>
    <link href="http://yoursite.com/2018/06/10/%E9%98%9F%E5%88%97%E8%A7%A3%E5%86%B3%E7%BA%A6%E7%91%9F%E5%A4%AB%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/10/队列解决约瑟夫问题/</id>
    <published>2018-06-10T12:24:49.000Z</published>
    <updated>2018-06-10T12:28:48.902Z</updated>
    
    <content type="html"><![CDATA[<p>  最近看了java用队列解决约瑟夫问题，觉得队列挺方便的.<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while (people.size() &gt; 0) &#123;</span><br><span class="line">//核心算法：</span><br><span class="line">//连接尾部与头部</span><br><span class="line">for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">int temp = people.remove();</span><br><span class="line">people.add(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是c语言队列的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">结构体如下：</span><br><span class="line">struct Queue</span><br><span class="line">&#123;</span><br><span class="line">int capacity;</span><br><span class="line">int front;</span><br><span class="line">int rear;</span><br><span class="line">int size;</span><br><span class="line">int *num;</span><br><span class="line">&#125;;</span><br><span class="line">直接上参考代码了：</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">struct Queue</span><br><span class="line">&#123;</span><br><span class="line">int capacity;</span><br><span class="line">int front;</span><br><span class="line">int rear;</span><br><span class="line">int size;</span><br><span class="line">int *num;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct Queue queue;</span><br><span class="line">/*创建一个空的队列</span><br><span class="line">形参代表这个队列的长度最大是多少*/</span><br><span class="line">queue *createQueue(int capacity)</span><br><span class="line">&#123;</span><br><span class="line">queue *Q = (queue*)malloc(sizeof(queue));</span><br><span class="line">Q-&gt;capacity=capacity;</span><br><span class="line">Q-&gt;front = Q-&gt;rear =0;</span><br><span class="line">Q-&gt;size=0;</span><br><span class="line">Q-&gt;num=(int*)malloc(sizeof(int)*capacity);</span><br><span class="line">return Q;</span><br><span class="line">&#125;</span><br><span class="line">/*判断一个队列是否为空</span><br><span class="line">为空的话返回1，否则返回0*/</span><br><span class="line">int isEmpty(queue* Q)</span><br><span class="line">&#123;</span><br><span class="line">return Q-&gt;size==0?1:0;</span><br><span class="line">&#125;</span><br><span class="line">/*判断一个队列是否为满</span><br><span class="line">满的话返回1，否则返回0*/</span><br><span class="line">int isFull(queue*Q)</span><br><span class="line">&#123;</span><br><span class="line">return Q-&gt;size==Q-&gt;capacity?1:0;</span><br><span class="line">&#125;</span><br><span class="line">/*入队*/</span><br><span class="line">void inQueue(int x, queue* Q)</span><br><span class="line">&#123;</span><br><span class="line">if(isFull(Q))</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;Queue is full\n&quot;);</span><br><span class="line">  exit(1);</span><br><span class="line">&#125;</span><br><span class="line">Q-&gt;size++;</span><br><span class="line">Q-&gt;num[Q-&gt;rear++]=x;</span><br><span class="line">if(Q-&gt;rear ==Q-&gt;capacity)</span><br><span class="line">  Q-&gt;rear=0;//使用循环数组方式</span><br><span class="line">&#125;</span><br><span class="line">/*出队</span><br><span class="line">返回元素的值*/</span><br><span class="line">int outQueue(queue *Q)</span><br><span class="line">&#123;</span><br><span class="line">int temp;</span><br><span class="line">if(isEmpty(Q))</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;Queue is empty\n&quot;);</span><br><span class="line">  exit(1);</span><br><span class="line">&#125;</span><br><span class="line">temp=Q-&gt;num[Q-&gt;front];</span><br><span class="line">Q-&gt;size--;</span><br><span class="line">Q-&gt;front++;</span><br><span class="line">if(Q-&gt;front==Q-&gt;capacity)</span><br><span class="line">  Q-&gt;front=0;</span><br><span class="line">return temp;</span><br><span class="line">&#125;</span><br><span class="line">/*释放队列所占的空间*/</span><br><span class="line">void deleteQueue(queue* Q)</span><br><span class="line">&#123;</span><br><span class="line">if(Q!=NULL)</span><br><span class="line">&#123;</span><br><span class="line">  free(Q-&gt;num);</span><br><span class="line">  free(Q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  最近看了java用队列解决约瑟夫问题，觉得队列挺方便的.&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java用栈实现迷宫操作</title>
    <link href="http://yoursite.com/2018/06/02/java%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E8%BF%B7%E5%AE%AB%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/06/02/java用栈实现迷宫操作/</id>
    <published>2018-06-02T15:13:09.000Z</published>
    <updated>2018-06-02T15:21:28.544Z</updated>
    
    <content type="html"><![CDATA[<p>假设把迷宫看成一个二维数组，每个数组表示一条通道或一堵墙.<br>算法分析：<br>    从左上角开始，看有效移动（1为有效，0为无效），假如有两个有效移动，向右和向下，把这两个有效移动压入栈中.并把栈顶的有效移动从栈中弹出，然后移动。直到该有效移动不再有效，执行栈中其他的的有效移动，直到栈空或者走完迷宫.<br>   这里迷宫式自己手动输入.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Maze &#123;</span><br><span class="line">    private static final int TRIED=2;</span><br><span class="line">    private static final int PATH=3;</span><br><span class="line">    private int numberRows,numberColumns;</span><br><span class="line">    private int[][] grid;</span><br><span class="line">    public Maze(int[][] maze_from)&#123;</span><br><span class="line">        numberRows=maze_from.length;</span><br><span class="line">        numberColumns=maze_from[0].length;</span><br><span class="line">        grid=new int[numberRows][numberColumns];</span><br><span class="line">        for (int i=0;i&lt;numberRows;i++)&#123;</span><br><span class="line">            for (int j=0;j&lt;numberColumns;j++)&#123;</span><br><span class="line">                grid[i][j]=maze_from[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //标记终点</span><br><span class="line">    public void tryPosition(int row,int col)&#123;</span><br><span class="line">        grid[row][col]=TRIED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNumberColumns() &#123;</span><br><span class="line">        return numberColumns;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNumberRows() &#123;</span><br><span class="line">        return numberRows;</span><br><span class="line">    &#125;</span><br><span class="line">    //标记终点</span><br><span class="line">    public void markPath(int row,int col)&#123;</span><br><span class="line">        grid[row][col]=PATH;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断该点是否合法</span><br><span class="line">    public boolean validPosition(int row,int column)&#123;</span><br><span class="line">        boolean result=false;</span><br><span class="line">        if (row&gt;=0&amp;&amp;row&lt;grid.length&amp;&amp;column&gt;=0&amp;&amp;column&lt;grid[row].length)</span><br><span class="line">            if (grid[row][column]==1)</span><br><span class="line">                result = true;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">      String result=&quot;\n&quot;;</span><br><span class="line">      for (int row=0;row&lt;grid.length;row++)&#123;</span><br><span class="line">          for (int column=0;column&lt;grid[0].length;column++)</span><br><span class="line">              result+=grid[row][column]+&quot;&quot;;</span><br><span class="line">          result+=&quot;\n&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import javax.swing.text.Position;</span><br><span class="line">import java.util.Deque;</span><br><span class="line">import java.util.LinkedList;</span><br><span class="line"></span><br><span class="line">public class MazeSolver &#123;</span><br><span class="line">    private Maze maze;</span><br><span class="line">    public MazeSolver(Maze maze)&#123;</span><br><span class="line">        this.maze=maze;</span><br><span class="line">    &#125;</span><br><span class="line">    public boolean traverse()&#123;</span><br><span class="line">        boolean done=false;</span><br><span class="line">        int row,column;</span><br><span class="line">        Location pos=new Location();</span><br><span class="line">        //Deque接口提供了栈的链表实现</span><br><span class="line">        Deque&lt;Location&gt; stack=new LinkedList&lt;Location&gt;();</span><br><span class="line">        stack.push(pos);</span><br><span class="line">        while (!done&amp;&amp;!stack.isEmpty())&#123;</span><br><span class="line">            pos=stack.pop();</span><br><span class="line">            maze.tryPosition(pos.getX(),pos.getY());</span><br><span class="line">            if (pos.getX()==maze.getNumberRows()-1&amp;&amp;pos.getY()==maze.getNumberRows()-1)</span><br><span class="line">                done=true;//走完迷宫</span><br><span class="line">            else &#123;</span><br><span class="line">                //压栈操作</span><br><span class="line">                push_in_stack(pos.getX()-1,pos.getY(),stack);</span><br><span class="line">                push_in_stack(pos.getX()+1,pos.getY(),stack);</span><br><span class="line">                push_in_stack(pos.getX(),pos.getY()-1,stack);</span><br><span class="line">                push_in_stack(pos.getX(),pos.getY()+1,stack);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return done;</span><br><span class="line">        &#125;</span><br><span class="line">        //压栈方法</span><br><span class="line">        private void push_in_stack(int x,int y,Deque&lt;Location&gt; stack)&#123;</span><br><span class="line">            Location npos=new Location();</span><br><span class="line">            npos.setX(x);</span><br><span class="line">            npos.setY(y);</span><br><span class="line">            if (maze.validPosition(x,y))</span><br><span class="line">                stack.push(npos);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class MazeTester &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[][] maze_from=new int[5][5];</span><br><span class="line">        Scanner scanner=new Scanner(System.in);</span><br><span class="line">        for (int i=0;i&lt;maze_from.length;i++)&#123;</span><br><span class="line">            for (int j=0;j&lt;maze_from[0].length;j++)</span><br><span class="line">                maze_from[i][j]=scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Maze test_maze=new Maze(maze_from);</span><br><span class="line">        System.out.println(test_maze);</span><br><span class="line">        MazeSolver solver=new MazeSolver(test_maze);</span><br><span class="line">        if (solver.traverse())</span><br><span class="line">            System.out.println(&quot;SUCCESSFUL!&quot;);</span><br><span class="line">        System.out.println(test_maze);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Location &#123;</span><br><span class="line">    private int x,y;</span><br><span class="line"></span><br><span class="line">    public void setX(int x) &#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getX() &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setY(int y) &#123;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getY() &#123;</span><br><span class="line">        return y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Deque接口是由LinkList类实现的，提供了栈的链表实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假设把迷宫看成一个二维数组，每个数组表示一条通道或一堵墙.&lt;br&gt;算法分析：&lt;br&gt;    从左上角开始，看有效移动（1为有效，0为无效），假如有两个有效移动，向右和向下，把这两个有效移动压入栈中.并把栈顶的有效移动从栈中弹出，然后移动。直到该有效移动不再有效，执行栈中其他
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>一元多项式求和</title>
    <link href="http://yoursite.com/2018/05/20/%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E5%92%8C/"/>
    <id>http://yoursite.com/2018/05/20/一元多项式求和/</id>
    <published>2018-05-20T13:13:47.000Z</published>
    <updated>2018-05-20T13:17:22.934Z</updated>
    
    <content type="html"><![CDATA[<p><strong>复习一下链表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">typedef struct lnode&#123;</span><br><span class="line">int expn,coef;</span><br><span class="line">struct lnode* next;</span><br><span class="line">&#125;lnode ,* lptr;</span><br><span class="line">//lptr是一个指向某个结点的指针 </span><br><span class="line">lptr creat()&#123;</span><br><span class="line">//一元多项式链表的创建</span><br><span class="line">lptr head,end,s=NULL;</span><br><span class="line">head=(lptr)malloc(sizeof(lnode));</span><br><span class="line">int expn,coef,count;</span><br><span class="line">head-&gt;next=NULL;</span><br><span class="line">end=head;</span><br><span class="line">//初始情况下，head和end指向同一个初始结点</span><br><span class="line">printf(&quot;请输入多项式的项数count=:&quot;); </span><br><span class="line">scanf(&quot;%d&quot;,&amp;count);</span><br><span class="line">for(int i=0;i&lt;count;i++)&#123;</span><br><span class="line">printf(&quot;请输入第%d项的系数和指数：&quot;,i+1);</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;coef,&amp;expn);</span><br><span class="line">s=(lptr)malloc(sizeof(lnode));</span><br><span class="line">s-&gt;coef=coef;</span><br><span class="line">s-&gt;expn=expn;</span><br><span class="line">s-&gt;next=NULL;</span><br><span class="line">//将新创建的节点插到尾部</span><br><span class="line">end-&gt;next=s;</span><br><span class="line">end=s;</span><br><span class="line">&#125;</span><br><span class="line">return head;</span><br><span class="line">&#125;</span><br><span class="line">void travel(lptr head)&#123;</span><br><span class="line">//遍历链表</span><br><span class="line">lptr p=head-&gt;next;</span><br><span class="line">while(p!=NULL)&#123;</span><br><span class="line">if(p-&gt;next!=NULL)&#123;</span><br><span class="line">if(p-&gt;coef!=1)&#123;</span><br><span class="line">      printf(&quot;%dx∧%d+&quot;,p-&gt;coef,p-&gt;expn);</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">printf(&quot;x∧%d+&quot;,p-&gt;expn);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">    if(p-&gt;coef!=1)&#123;</span><br><span class="line">      printf(&quot;%dx∧%d&quot;,p-&gt;coef,p-&gt;expn);</span><br><span class="line">      p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">    else </span><br><span class="line">&#123;</span><br><span class="line">            printf(&quot;x∧%d&quot;,p-&gt;expn);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">lptr add(lptr head_a,lptr head_b)&#123;</span><br><span class="line">//多项式相加</span><br><span class="line">lptr sum_head=(lptr)malloc(sizeof(lnode));</span><br><span class="line">sum_head-&gt;next=NULL;</span><br><span class="line">lptr sum_end=sum_head;</span><br><span class="line">lptr p_a=head_a-&gt;next;</span><br><span class="line">lptr p_b=head_b-&gt;next;</span><br><span class="line">while(p_a&amp;&amp;p_b)&#123;</span><br><span class="line">if(p_a-&gt;expn&lt;p_b-&gt;expn)&#123;</span><br><span class="line">sum_end-&gt;next=p_a;</span><br><span class="line">sum_end=p_a;</span><br><span class="line">p_a=p_a-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">else if(p_a-&gt;expn&gt;p_b-&gt;expn)&#123;</span><br><span class="line">sum_end-&gt;next=p_b;</span><br><span class="line">sum_end=p_b;</span><br><span class="line">p_b=p_b-&gt;next; </span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">if(0!=p_a-&gt;coef+p_b-&gt;coef)&#123;</span><br><span class="line">//指数相同的话就先把和赋给a </span><br><span class="line">p_a-&gt;coef=p_a-&gt;coef+p_b-&gt;coef;</span><br><span class="line">sum_end-&gt;next=p_a;</span><br><span class="line">sum_end=p_a;</span><br><span class="line">&#125;</span><br><span class="line">p_a=p_a-&gt;next;</span><br><span class="line">p_b=p_b-&gt;next;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">//插入剩余项 </span><br><span class="line">if(p_a!=NULL)&#123;</span><br><span class="line">sum_end-&gt;next=p_a;</span><br><span class="line">&#125; </span><br><span class="line">if(p_b!=NULL)&#123;</span><br><span class="line">sum_end-&gt;next=p_b;</span><br><span class="line">&#125;</span><br><span class="line">return sum_head;</span><br><span class="line">&#125; </span><br><span class="line">int main()&#123;</span><br><span class="line">lptr a=creat();</span><br><span class="line">lptr b=creat();</span><br><span class="line">travel(a);</span><br><span class="line">travel(b);</span><br><span class="line">lptr sum=add(a,b);</span><br><span class="line">travel(sum);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;复习一下链表&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="c" scheme="http://yoursite.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>关于小数点的位数</title>
    <link href="http://yoursite.com/2018/05/13/%E5%85%B3%E4%BA%8E%E5%B0%8F%E6%95%B0%E7%82%B9%E7%9A%84%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2018/05/13/关于小数点的位数/</id>
    <published>2018-05-13T14:07:34.000Z</published>
    <updated>2018-05-13T14:32:19.756Z</updated>
    
    <content type="html"><![CDATA[<p><strong>     最近上机，尝试用不同的语言处理一些小问题，发现自己对数据的精度控制输出不太熟练，遂决定做个小总结</strong><br><strong> 当然，只针对目前，日后再补充</strong></p><p>#1.c<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%5.2f&quot;,7.2456);</span><br><span class="line">//输出场宽为5，保留小数点后两位的7.25</span><br></pre></td></tr></table></figure></p><p>#2.c++<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(2)&lt;&lt;(double)get_tax(salary);</span><br><span class="line">//要在iomanip头文件下使用</span><br><span class="line">//输出小数点后两位</span><br></pre></td></tr></table></figure></p><p>#3.Java<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  1)System.out.printf(&quot;%5.2f&quot;,7.2564);</span><br><span class="line">     //这个类比c语言</span><br><span class="line">  2）import java.text.DecimalFormat;</span><br><span class="line">     public class ControlBit &#123;</span><br><span class="line">     public static void main(String[] argu)&#123;</span><br><span class="line">     double money = 399.74099999999993;</span><br><span class="line">     DecimalFormat df=new DecimalFormat(&quot;#.00&quot;);</span><br><span class="line">     System.out.println(df.format(money));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;     最近上机，尝试用不同的语言处理一些小问题，发现自己对数据的精度控制输出不太熟练，遂决定做个小总结&lt;/strong&gt;&lt;br&gt;&lt;strong&gt; 当然，只针对目前，日后再补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#1.c&lt;br&gt;  &lt;figure class
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java中super关键字</title>
    <link href="http://yoursite.com/2018/04/22/java%E4%B8%ADsuper%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2018/04/22/java中super关键字/</id>
    <published>2018-04-22T12:48:26.000Z</published>
    <updated>2018-04-22T13:32:23.519Z</updated>
    
    <content type="html"><![CDATA[<p><strong>super 是指当前类或对象的直接父类或父类对象的引用</strong></p><p>#1.调用父类的构造方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super（[参数列表]);</span><br></pre></td></tr></table></figure><p> <strong>子类中的构造方法总是先显式或隐式的调用父类的构造方法从而初始化子类中继承的父类成员。</strong></p><p>#2.访问被隐藏的成员变量和被重写的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">super.属性名；</span><br><span class="line">super.方法名([参数列表]);</span><br></pre></td></tr></table></figure></p><p>举个例子：<br><strong>创建父类Book</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pacage create;</span><br><span class="line">public class Book&#123;</span><br><span class="line">   public String name;</span><br><span class="line">   public Book()&#123;</span><br><span class="line">      System.out.println(&quot;父类的构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">   public void read()&#123;</span><br><span class="line">      System.out.println(&quot;在父类的方法中:读书&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>创建子类Text</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pacage create;</span><br><span class="line">public class Text extends Book&#123;</span><br><span class="line">  public String name;</span><br><span class="line">  public Text(String name)&#123;</span><br><span class="line">    super();//调用父类的构造方法</span><br><span class="line">    this.name=name;</span><br><span class="line">    System.out.println(&quot;子类的构造方法&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  public void read()&#123;</span><br><span class="line">    System.out.println(&quot;在子类的方法中：读书&quot;);</span><br><span class="line">    super.name=&quot;father&quot;;</span><br><span class="line">    System.out.println(&quot;在子类的方法中输出父类的name&quot;+super.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>测试</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pacage create;</span><br><span class="line">public class Test&#123;</span><br><span class="line">  public void main(String[] args)&#123;</span><br><span class="line">    Text t=new Text(&quot;child&quot;);//创建子类对象，调用子类构造方法</span><br><span class="line">    System.out.println(&quot;调用子类的name:&quot;+t.name);</span><br><span class="line">    t.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>运行示例</strong><br><img src="https://i.imgur.com/YiWlt8M.png" alt=""></p><p>#3.注意的问题<br>  在调用super关键字的时候，应当把他放在子类的构造方法最前面。<br><img src="https://i.imgur.com/3zKkUvZ.png" alt=""><br>  这样编译器会提示”Constructor call must be the first statement in a constrctor”的报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;super 是指当前类或对象的直接父类或父类对象的引用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#1.调用父类的构造方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>一些小问题</title>
    <link href="http://yoursite.com/2018/04/15/%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/04/15/一些小问题/</id>
    <published>2018-04-15T14:07:19.000Z</published>
    <updated>2018-04-15T14:57:45.913Z</updated>
    
    <content type="html"><![CDATA[<p>#1.关于main函数的传参<br>  键入可执行文件所在的文件夹。<br>  键入某个硬盘时要记得加冒号。<br>  在命令行中进行操作。</p><p>#2.java的增强型for循环<br>  格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(Type value:array)&#123;</span><br><span class="line">  expression value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就可以达到对数组成员的遍历。<br>举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pacage control;</span><br><span class="line">public class JavaFor &#123;</span><br><span class="line">     public static void main(String args[]&#123;</span><br><span class="line">         String[] fruits=&#123;&quot;apple&quot;,&quot;banana&quot;,&quot;orange&quot;,&quot;pear&quot;&#125;;</span><br><span class="line">         for( String fruit:fruits)&#123;</span><br><span class="line">             System.out.print(fruit);</span><br><span class="line">             System.out.print(&quot;,&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(&quot;\n&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>for循环自动控制一次遍历数组中的每一个元素，然后将它赋给一个临时变量，在循环体中可直接对此临时变量进行操作。、<br>如果要想知道当前遍历到数组的第几个元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int i = 0；</span><br><span class="line">for（int n：array）&#123;</span><br><span class="line">   System.out.println(&quot;This&quot;+i+&quot;-the element in the array is&quot;+n);</span><br><span class="line">   i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#3.visual stdio刚开始<br><img src="https://i.imgur.com/fRVuraW.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#1.关于main函数的传参&lt;br&gt;  键入可执行文件所在的文件夹。&lt;br&gt;  键入某个硬盘时要记得加冒号。&lt;br&gt;  在命令行中进行操作。&lt;/p&gt;
&lt;p&gt;#2.java的增强型for循环&lt;br&gt;  格式如下&lt;br&gt;&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小型桌面计算器</title>
    <link href="http://yoursite.com/2018/03/31/%E5%B0%8F%E5%9E%8B%E6%A1%8C%E9%9D%A2%E8%AE%A1%E7%AE%97%E5%99%A8-1/"/>
    <id>http://yoursite.com/2018/03/31/小型桌面计算器-1/</id>
    <published>2018-03-31T14:07:44.000Z</published>
    <updated>2018-03-31T14:08:51.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个小型的桌面计算器"><a href="#一个小型的桌面计算器" class="headerlink" title="一个小型的桌面计算器"></a>一个小型的桌面计算器</h1><p>主要是针对一些不合法输入的处理</p><p>##1.程序的数据结构##</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum Token_value&#123;NAME,NUMBER,END,PLUS=&apos;+&apos;,MINUS=&apos;-&apos;,MUL=&apos;*&apos;,DIV=&apos;/&apos;,PRINT=&apos;;&apos;,ASSIGN=&apos;=&apos;,LP=&apos;(&apos;,RP=&apos;)&apos;,&#125;;</span><br></pre></td></tr></table></figure><p>##2.5个全局变量</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Token_value         curr_tok=PRINT;  </span><br><span class="line">double              number_value;  </span><br><span class="line">string              string_value;  </span><br><span class="line">map&lt;string.double&gt;  table;  </span><br><span class="line">int                 no_of_errors;</span><br></pre></td></tr></table></figure><p>(1)<strong>curr_tok</strong>:在<strong>get_token</strong>中设置，在<strong>expr、term、prim、</strong>中的<strong>switch</strong>中使用。他表示的是当前读入的标记的类型，用来控制分类别的求值及其他处理。<br>(2)<strong>number_value</strong>:在<strong>get_token</strong>中设置，在<strong>prim</strong>中使用。它表示的是当前读入的值的字面值。<br>(3)<strong>string_value</strong>:在<strong>get_token</strong>中设置，在<strong>prim</strong>中使用<br>。它表达的是当前读入的符号名，用来在<strong>table</strong>中查找对应的数值。<br>(4)<strong>table</strong>:在<strong>prim</strong>中使用。它表示已经读入的符号名与对应数值，符号名可以增加，对应的数值通过引用类型隐含的赋值。<br>(5)<strong>no_of_errors</strong>:在<strong>error</strong>中设置，在<strong>main</strong>中使用。表示的是错误的数量。</p><p>##3.代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt; </span><br><span class="line">#include&lt;string&gt; </span><br><span class="line">#include&lt;map&gt; </span><br><span class="line">#include&lt;cctype&gt; </span><br><span class="line">  </span><br><span class="line">using namespace std;  </span><br><span class="line">enum Token_value </span><br><span class="line">&#123; </span><br><span class="line">NAME,NUMBER,END,PLUS=&apos;+&apos;,MINUS=&apos;-&apos;,MUL=&apos;*&apos;,DIV=&apos;/&apos;,PRINT=&apos;;&apos;,ASSIGN=&apos;=&apos;,LP=&apos;(&apos;,RP=&apos;)&apos;  </span><br><span class="line">&#125;;  </span><br><span class="line">Token_value curr_tok = PRINT; </span><br><span class="line">double number_value; </span><br><span class="line">string string_value;  </span><br><span class="line">map&lt;string,double&gt; table; </span><br><span class="line">int no_of_errors; </span><br><span class="line">double expr(bool get);  </span><br><span class="line">double term(bool get); </span><br><span class="line">double prim(bool get); </span><br><span class="line">Token_value get_token();  </span><br><span class="line">double error(const string&amp; s);//这些声明是必不可少的！</span><br><span class="line">Token_value get_token() </span><br><span class="line">&#123; </span><br><span class="line">char ch = 0; </span><br><span class="line">cin &gt;&gt; ch; </span><br><span class="line">switch (ch) </span><br><span class="line">&#123;  </span><br><span class="line">case 0: </span><br><span class="line">return curr_tok = END; </span><br><span class="line">case &apos;;&apos;: </span><br><span class="line">case &apos;*&apos;: </span><br><span class="line">case &apos;/&apos;: </span><br><span class="line">case &apos;+&apos;: </span><br><span class="line">case &apos;-&apos;:  </span><br><span class="line">case &apos;(&apos;:  </span><br><span class="line">case &apos;)&apos;:   </span><br><span class="line">case &apos;=&apos;:  </span><br><span class="line">return curr_tok = Token_value(ch); </span><br><span class="line">case &apos;0&apos;:case &apos;1&apos;:case &apos;2&apos;:case &apos;3&apos;:case &apos;4&apos;:  </span><br><span class="line">case &apos;5&apos;:case &apos;6&apos;:case &apos;7&apos;:case &apos;8&apos;:case &apos;9&apos;:</span><br><span class="line">case &apos;.&apos;: </span><br><span class="line">cin.putback(ch); </span><br><span class="line">cin &gt;&gt; number_value; </span><br><span class="line">return curr_tok = NUMBER; </span><br><span class="line">default: </span><br><span class="line">if (isalpha(ch)) </span><br><span class="line">&#123; </span><br><span class="line">cin.putback(ch); </span><br><span class="line">cin &gt;&gt; string_value; </span><br><span class="line">return curr_tok = NAME; </span><br><span class="line">&#125;  </span><br><span class="line">error(&quot;bad token&quot;); </span><br><span class="line">return curr_tok = PRINT;  </span><br><span class="line">&#125; </span><br><span class="line">&#125;  </span><br><span class="line">double error(const string&amp; s) </span><br><span class="line">&#123;  </span><br><span class="line">no_of_errors++;  </span><br><span class="line">cerr&lt;&lt;&quot;error:&quot;&lt;&lt;s&lt;&lt;&quot;\n&quot;; </span><br><span class="line">return 1; </span><br><span class="line">&#125;  </span><br><span class="line">double expr(bool get) // add and subtract </span><br><span class="line">&#123; </span><br><span class="line">double left = term(get); </span><br><span class="line">for (;;) </span><br><span class="line">switch (curr_tok) </span><br><span class="line">&#123;  </span><br><span class="line">case PLUS:  </span><br><span class="line">left+=term(true); </span><br><span class="line">break; </span><br><span class="line">case MINUS: </span><br><span class="line">left-=term(true); </span><br><span class="line">break; </span><br><span class="line">default: return left; </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">// multiply and divide  </span><br><span class="line">double term(bool get) </span><br><span class="line">&#123; </span><br><span class="line">double left = prim(get);</span><br><span class="line"> </span><br><span class="line">for (;;) </span><br><span class="line">switch (curr_tok) </span><br><span class="line">&#123; </span><br><span class="line">case MUL: </span><br><span class="line">left*= prim(true); </span><br><span class="line">break; </span><br><span class="line">case DIV: </span><br><span class="line">if (double d=prim(true)) </span><br><span class="line">&#123; left/=d; break; &#125; </span><br><span class="line">return error(&quot;divide by 0&quot;); </span><br><span class="line">default: return left; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">double prim(bool get) </span><br><span class="line">&#123; </span><br><span class="line">if(get) </span><br><span class="line">get_token(); </span><br><span class="line"> </span><br><span class="line">switch(curr_tok)  </span><br><span class="line">&#123;  </span><br><span class="line">case NUMBER: </span><br><span class="line">&#123; </span><br><span class="line">double v=number_value; </span><br><span class="line">get_token();  </span><br><span class="line">return v;  </span><br><span class="line">&#125;  </span><br><span class="line">case NAME: </span><br><span class="line">&#123; </span><br><span class="line">double&amp; v=table[string_value]; </span><br><span class="line">if(get_token()==ASSIGN) </span><br><span class="line">v=expr(true); </span><br><span class="line">return v;  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">case MINUS: </span><br><span class="line">return -prim(true); </span><br><span class="line">case LP: </span><br><span class="line">&#123; </span><br><span class="line">double e=expr(true); </span><br><span class="line">if(curr_tok!=RP)  </span><br><span class="line">return error(&quot;) expected&quot;); </span><br><span class="line">get_token(); </span><br><span class="line">return e;</span><br><span class="line">&#125;  </span><br><span class="line">default: </span><br><span class="line">return error(&quot;primary expected&quot;); </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">int main()  </span><br><span class="line">&#123; </span><br><span class="line">table[&quot;pi&quot;] = 3.1415926535897932385; </span><br><span class="line">table[&quot;e&quot;] = 2.7182818284590452354;  </span><br><span class="line">cout&lt;&lt;&quot;您将进入计算器模式&quot;&lt;&lt;endl&lt;&lt;&quot;请输入您要计算的算数表达式并以等号结束&quot;&lt;&lt;endl; </span><br><span class="line">while (cin)  </span><br><span class="line">&#123; </span><br><span class="line">get_token(); </span><br><span class="line">if (curr_tok == END) break; </span><br><span class="line">if (curr_tok == PRINT) continue; </span><br><span class="line">cout &lt;&lt; expr(false) &lt;&lt; &apos;\n&apos;;  </span><br><span class="line">&#125; </span><br><span class="line">std::cout&lt;&lt;&quot;为您得到的计算结果为：&lt;&lt;endl;&quot;; </span><br><span class="line">return no_of_errors; </span><br><span class="line">system(&quot;pause&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个小型的桌面计算器&quot;&gt;&lt;a href=&quot;#一个小型的桌面计算器&quot; class=&quot;headerlink&quot; title=&quot;一个小型的桌面计算器&quot;&gt;&lt;/a&gt;一个小型的桌面计算器&lt;/h1&gt;&lt;p&gt;主要是针对一些不合法输入的处理&lt;/p&gt;
&lt;p&gt;##1.程序的数据结构##&lt;/
      
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>masm5.0的简单使用</title>
    <link href="http://yoursite.com/2018/03/26/%E7%AE%80%E5%8D%95%E7%9A%84%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/03/26/简单的汇编指令/</id>
    <published>2018-03-26T11:05:54.000Z</published>
    <updated>2018-04-09T16:41:09.056Z</updated>
    
    <content type="html"><![CDATA[<p>##1.存储一个asm文件</p><p>  <img src="https://i.imgur.com/tY0mskZ.png" alt=""><br><strong>  可以用记事本或dos的edit编辑器，我这里用的是记事本，将文件存储为.asm文件。并记清楚路径。</strong><br><strong>推荐做实验的话，可以把masm和link应用程序以及文件存放在一个文件夹下。 </strong></p><p>##2.link</p><p>###1.obj</p><p><img src="https://i.imgur.com/HDdfOXf.png" alt=""><br><strong>提示输入源文件名，只需输入.asm之前的部分</strong></p><p><img src="https://i.imgur.com/Diz9MLw.png" alt=""></p><p><strong>接下来的几个部分回车即可</strong></p><p>###2.exe<br><img src="https://i.imgur.com/6PcAsK6.png" alt=""></p><p><strong>输入同一个文件名，当然，可以指明路径，只需在后面加上即可</strong><br><strong>例如：</strong><br><img src="https://i.imgur.com/ssghx5M.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1.存储一个asm文件&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://i.imgur.com/tY0mskZ.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;strong&gt;  可以用记事本或dos的edit编辑器，我这里用的是记事本，将文件存储为.asm文件。并记清楚路径。&lt;
      
    
    </summary>
    
      <category term="汇编语言" scheme="http://yoursite.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="汇编" scheme="http://yoursite.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>about the name</title>
    <link href="http://yoursite.com/2018/03/25/about-the-name/"/>
    <id>http://yoursite.com/2018/03/25/about-the-name/</id>
    <published>2018-03-25T13:09:52.000Z</published>
    <updated>2018-03-25T13:24:42.025Z</updated>
    
    <content type="html"><![CDATA[<p>#未命名#<br>为什么<br>搞不懂啊！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#未命名#&lt;br&gt;为什么&lt;br&gt;搞不懂啊！！！&lt;/p&gt;

      
    
    </summary>
    
      <category term="搭建博客与发文" scheme="http://yoursite.com/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%B8%8E%E5%8F%91%E6%96%87/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/03/25/test-ca/"/>
    <id>http://yoursite.com/2018/03/25/test-ca/</id>
    <published>2018-03-25T03:04:34.921Z</published>
    <updated>2018-03-26T11:02:11.810Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: test_ca<br>date: 2018-03-25 11:04:34<br>tags: [编程]</p><h2 id="categories-c-c"><a href="#categories-c-c" class="headerlink" title="categories: c/c++"></a>categories: c/c++</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: test_ca&lt;br&gt;date: 2018-03-25 11:04:34&lt;br&gt;tags: [编程]&lt;/p&gt;
&lt;h2 id=&quot;categories-c-c&quot;&gt;&lt;a href=&quot;#categories-c-c&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/03/24/pageabout/"/>
    <id>http://yoursite.com/2018/03/24/pageabout/</id>
    <published>2018-03-24T11:42:15.330Z</published>
    <updated>2018-03-25T04:08:09.202Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: pageabout<br>date: 2018-03-24 19:42:15</p><h2 id="tags-“about”"><a href="#tags-“about”" class="headerlink" title="tags: “about”"></a>tags: “about”</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: pageabout&lt;br&gt;date: 2018-03-24 19:42:15&lt;/p&gt;
&lt;h2 id=&quot;tags-“about”&quot;&gt;&lt;a href=&quot;#tags-“about”&quot; class=&quot;headerlink&quot; title=&quot;tags: “abo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/23/hello-world/"/>
    <id>http://yoursite.com/2018/03/23/hello-world/</id>
    <published>2018-03-23T14:03:51.001Z</published>
    <updated>2018-03-23T14:03:51.006Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
